const { Telegraf } = require("telegraf");
const { initializeApp } = require("firebase/app");
const { getFirestore, collection, addDoc, getDocs, query, where } = require("firebase/firestore");
const { getRemoteConfig, fetchAndActivate, getValue } = require("firebase/remote-config");
require("dotenv").config();

const firebaseConfig = {
  apiKey: process.env.FIREBASE_API_KEY,
  authDomain: process.env.FIREBASE_AUTH_DOMAIN,
  projectId: process.env.FIREBASE_PROJECT_ID,
};

const firebaseApp = initializeApp(firebaseConfig);
const db = getFirestore(firebaseApp);
const remoteConfig = getRemoteConfig(firebaseApp);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12 —á–∞—Å–æ–≤)
remoteConfig.settings = {
  minimumFetchIntervalMillis: 0, // –î–ª—è —Ç–µ—Å—Ç–æ–≤ –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å 0
};

const BOT_TOKEN = process.env.BOT_TOKEN;
const bot = new Telegraf(BOT_TOKEN);

bot.start(async (ctx) => {
  const referredUserId = ctx.from.id.toString();
  const refParam = ctx.startPayload;
  const referrerId = refParam?.replace("ref", "");

  // üîê –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª–∞
  if (referrerId && referredUserId !== referrerId) {
    const q = query(
      collection(db, "referrals"),
      where("referredUserId", "==", referredUserId)
    );
    const snapshot = await getDocs(q);

    if (snapshot.empty) {
      await addDoc(collection(db, "referrals"), {
        referredUserId,
        referrerId,
        createdAt: new Date(),
        bonusGiven: false
      });
      console.log(`–†–µ—Ñ–µ—Ä–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: ${referredUserId} ‚Üê ${referrerId}`);
    } else {
      console.log(`–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞—Ö–æ–¥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ: ${referredUserId}`);
    }
  }

  // üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏–∑ Remote Config
  let gameUrl = "https://miner-d9gz216.flutterflow.app/"; // –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
  try {
    await fetchAndActivate(remoteConfig);
    gameUrl = getValue(remoteConfig, "gameUrl").asString();
    console.log(`URL –∏–∑ Remote Config: ${gameUrl}`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ gameUrl –∏–∑ Remote Config:", err);
  }

  // üì≤ –û—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π
  await ctx.reply("üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!", {
    reply_markup: {
      inline_keyboard: [[{
        text: "–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        web_app: { url: gameUrl }
      }]]
    }
  });
});

bot.launch().then(() => {
  console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");
});
